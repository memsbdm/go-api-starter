definitions:
  http.emptyResponse:
    properties:
      success:
        example: true
        type: boolean
    type: object
  http.errorResponse:
    properties:
      messages:
        example:
        - Error message 1
        - ' Error message 2'
        items:
          type: string
        type: array
      success:
        example: false
        type: boolean
    type: object
  http.getUserByIDResponse:
    properties:
      id:
        example: 6b947a32-8919-4974-9ef3-048a556b0b75
        type: string
      username:
        example: john
        type: string
    type: object
  http.healthResponse:
    properties:
      idle:
        example: "1"
        type: string
      in_use:
        example: "0"
        type: string
      max_idle_closed:
        example: "0"
        type: string
      max_lifetime_closed:
        example: "0"
        type: string
      message:
        example: It's healthy'
        type: string
      open_connections:
        example: "1"
        type: string
      status:
        example: up
        type: string
      wait_count:
        example: "0"
        type: string
      wait_duration:
        example: 0s
        type: string
    type: object
  http.loginRequest:
    properties:
      password:
        example: secret123
        type: string
      username:
        example: john
        type: string
    required:
    - password
    - username
    type: object
  http.loginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  http.refreshTokenRequest:
    properties:
      refreshToken:
        example: eyJhbGci...
        type: string
    required:
    - refreshToken
    type: object
  http.registerRequest:
    properties:
      password:
        example: secret123
        minLength: 8
        type: string
      username:
        example: john
        maxLength: 15
        minLength: 4
        type: string
    required:
    - password
    - username
    type: object
  http.response-http_getUserByIDResponse:
    properties:
      data:
        $ref: '#/definitions/http.getUserByIDResponse'
      success:
        type: boolean
    type: object
  http.response-http_loginResponse:
    properties:
      data:
        $ref: '#/definitions/http.loginResponse'
      success:
        type: boolean
    type: object
  http.response-http_userResponse:
    properties:
      data:
        $ref: '#/definitions/http.userResponse'
      success:
        type: boolean
    type: object
  http.updatePasswordRequest:
    properties:
      password:
        example: secret123
        minLength: 8
        type: string
      password_confirmation:
        example: secret123
        type: string
    required:
    - password
    - password_confirmation
    type: object
  http.userResponse:
    properties:
      created_at:
        example: "2024-08-15T16:23:33.455225Z"
        type: string
      id:
        example: 6b947a32-8919-4974-9ef3-048a556b0b75
        type: string
      is_email_verified:
        example: true
        type: boolean
      updated_at:
        example: "2025-01-15T14:29:33.455225Z"
        type: string
      username:
        example: john
        type: string
    type: object
info:
  contact: {}
  description: This is a simple starter API written in Go using net/http, PostgresSQL
    database, and Redis cache.
  title: Go Starter API
  version: "1.0"
paths:
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user account
      parameters:
      - description: Login request
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/http.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Access and refresh tokens
          schema:
            $ref: '#/definitions/http.response-http_loginResponse'
        "401":
          description: Unauthorized / credentials error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      summary: Login a user
      tags:
      - Auth
  /v1/auth/logout:
    delete:
      consumes:
      - application/json
      description: Logout an authenticated user
      parameters:
      - description: Refresh token request
        in: body
        name: refreshTokenRequest
        required: true
        schema:
          $ref: '#/definitions/http.refreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/http.emptyResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Logout an authenticated user
      tags:
      - Auth
  /v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate a new access token and refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: refreshTokenRequest
        required: true
        schema:
          $ref: '#/definitions/http.refreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Access and refresh tokens
          schema:
            $ref: '#/definitions/http.response-http_loginResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Generate a new access token and refresh token
      tags:
      - Auth
  /v1/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Register request
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/http.registerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created user
          schema:
            $ref: '#/definitions/http.response-http_userResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "409":
          description: Duplication error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      summary: Register a new user
      tags:
      - Auth
  /v1/health:
    get:
      consumes:
      - application/json
      description: Get database health information
      produces:
      - application/json
      responses:
        "200":
          description: DB information
          schema:
            $ref: '#/definitions/http.healthResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      summary: Get database health information
      tags:
      - Health
  /v1/users/{uuid}:
    get:
      consumes:
      - application/json
      description: Get a user by id
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User displayed
          schema:
            $ref: '#/definitions/http.response-http_getUserByIDResponse'
        "400":
          description: Incorrect User ID
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Get a user
      tags:
      - Users
  /v1/users/me:
    get:
      description: Get information of logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: User displayed
          schema:
            $ref: '#/definitions/http.response-http_userResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Get authenticated user information
      tags:
      - Users
  /v1/users/password:
    patch:
      consumes:
      - application/json
      description: Update user password
      parameters:
      - description: Update user password request
        in: body
        name: updatePasswordRequest
        required: true
        schema:
          $ref: '#/definitions/http.updatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/http.emptyResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Update user password
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the access token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
